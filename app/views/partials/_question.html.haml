-# TODO: js for slider
- rg ||= nil
- renderer = q.renderer(g ||= nil)
- disabled = defined?(disableFlag) ? disableFlag : false
- unless q.display_type == 'hidden'
  %fieldset{ id: rg ? "q_#{q.id}_#{rg}" : "q_#{q.id}", class: "q_#{renderer} #{q.css_class(@response_set)}" }
    %legend= q_text(q, @render_context, I18n.locale).html_safe
    %span.help= q.help_text_for(@render_context, I18n.locale)
    - case renderer
    - when :image, :label, :default_label, :inline_label, :repeater_label
    - when :dropdown, :inline_dropdown, :default_dropdown, :slider, :repeater_dropdown
      - r = response_for(@response_set, q, nil, rg)
      = hidden_field_tag "response_set[responses_attributes][#{index}][question_id]", r.question_id
      = hidden_field_tag("response_set[responses_attributes][#{index}][response_group]", rg) if g.try(:display_type) == 'repeater'
      = hidden_field_tag "response_set[responses_attributes][#{index}][api_id]", r.api_id
      %label{ for:"response_set[responses_attributes][#{index}]", class: renderer }
        = q.text
      = select_tag "response_set[responses_attributes][#{index}][answer_id]", options_from_collection_for_select(q.answers, 'id', 'text'), include_blank: renderer != :slider, disabled: disabled
    - else # :default, :inline, :inline_default
      - case q.pick
      - when 'one', 'any'
        - answers = q.answers.reject { |answer| disabled and @response_set.responses.where( :question_id => q.id, :answer_id => answer.id).empty? }
      - when 'none'
        - answers = q.answers
      = render('partials/answers', answers: answers, question: q, rg: rg, g: g, disabled: disabled, index: index)
